linked list operations

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* link;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->link = NULL; 
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode; 
        return;
    }
    struct Node* temp = *head;
    while (temp->link != NULL) { 
        temp = temp->link;
    }
    temp->link = newNode;
}

void deleteByValue(struct Node** head, int value) {
    struct Node* temp = *head;
    struct Node* prev = NULL;

    if (temp != NULL && temp->data == value) {
        *head = temp->link; 
        free(temp);
        return;
    }

    while (temp != NULL && temp->data != value) {
        prev = temp;
        temp = temp->link;
    }

    if (temp == NULL) {
        printf("Value %d not found in the list.\n", value);
        return;
    }

    prev->link = temp->link;
    free(temp);
}

struct Node* search(struct Node* head, int value) {
    struct Node* current = head;
    while (current != NULL) {
        if (current->data == value) {
            return current; 
        }
        current = current->link;
    }
    return NULL;
}

void displayList(struct Node* node) {
    while (node != NULL) {
        printf("%d -> ", node->data);
        node = node->link; 
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

    insertEnd(&head, 10);
    insertEnd(&head, 20);
    insertEnd(&head, 30);

    printf("Linked List after insertions: ");
    displayList(head);

    deleteByValue(&head, 20);
    printf("Linked List after deleting 20: ");
    displayList(head);

    struct Node* found = search(head, 30);
    if (found) {
        printf("Found %d in the list.\n", found->data);
    } else {
        printf("Value not found in the list.\n");
    }

    deleteByValue(&head, 10);
    deleteByValue(&head, 30);

    return 0;
}
